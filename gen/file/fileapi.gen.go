// Package fileapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package fileapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/I0Dzela/pisp-specs/gen/common"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	SignAuthScopes   = "signAuth.Scopes"
)

// Defines values for GetFilesParamsMime.
const (
	Imagejpeg GetFilesParamsMime = "image/jpeg"
	Videomp4  GetFilesParamsMime = "video/mp4"
)

// Defines values for GetFilesParamsType.
const (
	EXTRACTED GetFilesParamsType = "EXTRACTED"
	INPUT     GetFilesParamsType = "INPUT"
)

// FileMetadata Object representing file metadata
type FileMetadata struct {
	CreatedAt *time.Time       `json:"createdAt"`
	Data      *json.RawMessage `json:"data"`
	DeletedAt *time.Time       `json:"deletedAt"`
	FileId    *uint64          `json:"fileId"`
	Id        *uint64          `json:"id"`
	UpdatedAt *time.Time       `json:"updatedAt"`
}

// GetFileMetadataResponse Object representing file metadata
type GetFileMetadataResponse struct {
	CreatedAt time.Time       `json:"createdAt"`
	Data      json.RawMessage `json:"data"`
	DeletedAt *time.Time      `json:"deletedAt"`
	FileId    uint64          `json:"fileId"`
	Id        uint64          `json:"id"`
	UpdatedAt time.Time       `json:"updatedAt"`
}

// GetFileResponse Object representing file
type GetFileResponse struct {
	CreatedAt     time.Time        `json:"createdAt"`
	DeletedAt     *time.Time       `json:"deletedAt"`
	DownloadUrl   *string          `json:"downloadUrl"`
	FilePath      string           `json:"filePath"`
	FileUrl       string           `json:"fileUrl"`
	Filename      *string          `json:"filename"`
	Id            uint64           `json:"id"`
	Metadata      *json.RawMessage `json:"metadata"`
	Mime          string           `json:"mime"`
	Size          *uint64          `json:"size"`
	ThumbFilePath *string          `json:"thumbFilePath"`
	UpdatedAt     time.Time        `json:"updatedAt"`
}

// GetFilesResponse Get files response
type GetFilesResponse struct {
	Count int               `json:"count"`
	Rows  []GetFileResponse `json:"rows"`
}

// SetCookiesResponse Set cookies response
type SetCookiesResponse struct {
	Message string `json:"message"`
}

// GetFilesParams defines parameters for GetFiles.
type GetFilesParams struct {
	// Page Page
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Page size
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// UsedId User id
	UsedId *uint64 `form:"usedId,omitempty" json:"usedId,omitempty"`

	// Mime File processing mime
	Mime *GetFilesParamsMime `form:"mime,omitempty" json:"mime,omitempty"`

	// From File processing status
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`

	// To File processing status
	To *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`

	// Search Filter by filename
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Type File type
	Type *GetFilesParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetFilesParamsMime defines parameters for GetFiles.
type GetFilesParamsMime string

// GetFilesParamsType defines parameters for GetFiles.
type GetFilesParamsType string

// SetCookiesMultipartBody defines parameters for SetCookies.
type SetCookiesMultipartBody struct {
	Cookies string `json:"cookies"`
}

// GetFileDataParams defines parameters for GetFileData.
type GetFileDataParams struct {
	// Thumbnail Get thumbnail
	Thumbnail *bool `form:"thumbnail,omitempty" json:"thumbnail,omitempty"`

	// P Auth
	P string `form:"p" json:"p"`
}

// SetCookiesMultipartRequestBody defines body for SetCookies for multipart/form-data ContentType.
type SetCookiesMultipartRequestBody SetCookiesMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get files
	// (GET /files)
	GetFiles(c *gin.Context, params GetFilesParams)
	// Set google cookies
	// (POST /files/cookies)
	SetCookies(c *gin.Context)
	// Get file data by id
	// (GET /files/file-data/{id})
	GetFileData(c *gin.Context, id uint64, params GetFileDataParams)
	// Get file service version
	// (GET /files/version)
	GetVersion(c *gin.Context)
	// Get file by id
	// (GET /files/{id})
	GetFile(c *gin.Context, id uint64)
	// Get file metadata by id
	// (GET /files/{id}/metadata)
	GetFileMetadata(c *gin.Context, id uint64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetFiles operation middleware
func (siw *ServerInterfaceWrapper) GetFiles(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFilesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "usedId" -------------

	err = runtime.BindQueryParameter("form", true, false, "usedId", c.Request.URL.Query(), &params.UsedId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter usedId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "mime" -------------

	err = runtime.BindQueryParameter("form", true, false, "mime", c.Request.URL.Query(), &params.Mime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mime: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", c.Request.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", c.Request.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter to: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter search: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFiles(c, params)
}

// SetCookies operation middleware
func (siw *ServerInterfaceWrapper) SetCookies(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetCookies(c)
}

// GetFileData operation middleware
func (siw *ServerInterfaceWrapper) GetFileData(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SignAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFileDataParams

	// ------------- Optional query parameter "thumbnail" -------------

	err = runtime.BindQueryParameter("form", true, false, "thumbnail", c.Request.URL.Query(), &params.Thumbnail)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter thumbnail: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "p" -------------

	if paramValue := c.Query("p"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument p is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "p", c.Request.URL.Query(), &params.P)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter p: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFileData(c, id, params)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVersion(c)
}

// GetFile operation middleware
func (siw *ServerInterfaceWrapper) GetFile(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFile(c, id)
}

// GetFileMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetFileMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFileMetadata(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/files", wrapper.GetFiles)
	router.POST(options.BaseURL+"/files/cookies", wrapper.SetCookies)
	router.GET(options.BaseURL+"/files/file-data/:id", wrapper.GetFileData)
	router.GET(options.BaseURL+"/files/version", wrapper.GetVersion)
	router.GET(options.BaseURL+"/files/:id", wrapper.GetFile)
	router.GET(options.BaseURL+"/files/:id/metadata", wrapper.GetFileMetadata)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY227bRhD9FWLbR1mkUyNtCfTBTWIjLdwavqQFDKNYkSN6Xe4lu0M7qqF/L/ZCipJI",
	"mUrkOAjyYkjWzM5lzzkz5APJJFdSgEBD0gdishvg1H08YiWcANKcIrXfczCZZgqZFCQlf05uIcNIg9Jg",
	"QCATRTRlJUS8dhkRpaUCjQzceZkGipAfov2CMwUkJQY1EwUZkQ97hdwL/0TGYXzBOLT/v8e4ktr5Csqt",
	"WbBQFG+CE5lbB8kZAlc4I+mUlgbmI1KXsCnqrZFifEbvT8AYWjwSe8kuZGAP6M8ASnim4u2tvM2tL3yg",
	"XJVA0v1kRKZSc4okJRUT+PKAjOq0mEAoQJOe49jujqpU/jyImDcZSgdja3YM2Eb8GRglhYFvyP+G/K8L",
	"+RreV0xDTtIrW1LASNOtUQuu7USv+zmzPVe+KIo8H0BzeS9KSfNLXXYH7wH1qTt7C4dtA/hSBjrskBe8",
	"tW88n2RxtkX1hv0HO6sfbyo+Odr2hr8oNeHeuYHpAoAfoSymX1qOAZ2UmEjXNmuiIivR7skjzdfy3rnZ",
	"H9yH7zVMSUq+ixc7chwW5HhV+hYrBdWazsiQfrmAo5BmVxfOAV9J+S/b1IdzwCjzRv2d4AH/wxC1kmbt",
	"3JVhJjmX4p9jwHegDZOiP9Fg0J8kbkO7yoAebHznQ39c+bVziDnyea43w2oBZJVmODu3IPFFTYBq0IeV",
	"p7P/dlSrw29/XZCRf+ayJ/lfF2Jxg6jI3B7MxFT6FqGVGPdsZqJz0HfOvqmP7I9f2GuRCgRVjKTkh3Ey",
	"3g9kdgnFjjT2UwGOHPYKqL0juyo1xHMumnJA0IakV6u3eerltFG9xCZJUvK+Am3RH6REeTPPmg4qzuej",
	"rpMjp6rDjj/3ptuEuDSgI6dWXYdWBnK3CC2OfFTPO4LYNkZKywyMsXtPEMamJKeUvzBOC4hvFRQ92QS3",
	"RS4gKu7Utu15x3KQMVcHLWAGjA9IzSDFyvQkMNWSdzfDCjjZdTiUnxwMQUeTWdQsMt2BDFCd3XQh55FK",
	"nFVP8v6n9ct6+8fppeX6m78vzg5fXbx53XVP11Z4vDg6gr5IEj/GBIIfZFSpkmWOrbFbYZpXNgPn1WKQ",
	"OF1Z2dZ/X1Ixx/q2fl1d2xRNxTnVs/YIdm5eWOIwi2w+SpoOhVkMNeKFFgz+KvPZSqm8KpEpqjG2ENir",
	"t8JFtauzvgm7dotLcl4bdgj4kiXqyi0FT3UhHbN9w5U0PbfjvpCyKKGe+u3m27+uVfEDy+ePifzr8LJi",
	"k847xDupbITrIGBf+fUuQN/ZLLfvUxXU4sttxIKysp2BP7yTgC3zNV5PpCyBiq5QDuA9M2ZjXbvmcNOn",
	"CRPUpbEaYRBtDSvEZtJGFiZWJlneRlBrVeqDzrtmIXoycvSvlUM40pRoQN+xDKK6qFadQ/gxnBtPwofP",
	"MA6eYhqsY8r2Om4/2m9q+knrLerX3fy1V827vIS63c1tuFPs84JvZqXL8IRh0jhmiWJGjTPJ0x+T5OeY",
	"WIVcNnEGpcxomb5Mkp9iMr+e/x8AAP//xMeVGD4aAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
